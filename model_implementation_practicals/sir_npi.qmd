---
title: "Simulating an SIR model with non-pharmaceutical interventions (NPIs)"
author: "Dr. James Mba Azam"
date: "2025-09-02"
format: 
  html:
    theme:
      light: flatly
      dark: darkly
execute:
  echo: true
  warning: true
  message: true
engine: knitr
---

In this practical, we will be simulating an SIR model with a non-pharmaceutical intervention.

{{< include _quarto_tips.qmd >}}

We will build on our previous SIR model code in `sir.qmd` and modify it to include the time-varying transmission rate.

{{< include _lsoda_explanation.qmd >}}

## The model equations and R function definition

Let's start by defining the model equations.

Recall that the model equations for the SIR model with a non-pharmaceutical intervention are given by:

$$
\begin{align}
\frac{dS}{dt} & = \color{orange}{-\beta(t) S I} \\
\frac{dI}{dt} & = \color{orange}{\beta(t) S I} - \color{blue}{\gamma I} \\
\frac{dR}{dt} & = \color{blue}{\gamma I}
\end{align}
$$

where $\beta(t)$ is the time-varying transmission rate defined as:

$$
\beta(t) = \begin{cases}
\beta_0 & \text{if } t < t_{\text{NPI start}} \text{ or } t > t_{\text{NPI end}} \\
(1 - \epsilon) \beta_0 & \text{if } t_{\text{NPI start}} \leq t \leq t_{\text{NPI end}}
\end{cases}
$$

where:

- $\beta_0$ is the baseline transmission rate (before intervention)
- $\epsilon$ is the intervention effectiveness (0 ≤ $\epsilon$ ≤ 1)
- $t_{\text{NPI start}}$ is the time when the intervention starts
- $t_{\text{NPI end}}$ is the time when the intervention ends

The intervention reduces transmission by a factor of $(1 - \epsilon)$, so:

- $\epsilon = 0$: no effect (transmission unchanged)
- $\epsilon = 0.5$: 50% reduction in transmission
- $\epsilon = 1$: complete prevention of transmission
```{r sir-npi-model}
# Define the SIR model differential equations
sir_npi <- function(t, y, parms) {
  with(as.list(c(y, parms)), {
    # Time-varying transmission rate
    beta <- ifelse(t < t_NPI_start | t > t_NPI_end, beta_0, (1 - epsilon) * beta_0)
    # SIR model
    dS <- -beta * S * I
    dI <- beta * S * I - gamma * I
    dR <- gamma * I
    list(c(dS, dI, dR))
  })
}

```

{{< include _model_function_components.qmd >}}

Next, we will define the parameters and initial conditions. Note that we will also define the time at which the NPI is implemented, `t_NPI_start` and `t_NPI_end`.

## Initial conditions

```{r model-init}
# The initial conditions
# Population size
N  <- 1
I_0 <- 0.01
R_0 <- 0
# Initial conditions for S, I, R
inits <- c(S = N - I_0, I = I_0, R = R_0)
```

## Model parameters

```{r model-params}
# Parameters
R0 <- 2
infectious_period <- 7
# Remember gamma = 1/ infectious_period as discussed earlier
gamma <- 1/infectious_period
beta_0 <- 0.25
epsilon <- 0.5

# Combine the parameters
parms <- c(
  beta_0 = beta_0,
  gamma = gamma,
  epsilon = epsilon
)
```

## Time steps to return results

```{r model-time}
dt <- 1:365
```

## NPI implementation

```{r npi-time}
# Time at which the NPI is implemented
npi_times <- c(t_NPI_start = 10, t_NPI_end = 51) # 21 days of NPI
```

------------------------------------------------------------------------

## Solving the model

Now, let's solve the model equations.

```{r sir-npi-solve}
# Load necessary packages
library(deSolve)
# Integrate the SIR equations over the time grid
output <- lsoda(
  y = inits,
  times = dt,
  func = sir_npi,
  parms = c(parms, npi_times)
)

# Convert the output to a data frame
output_df <- as.data.frame(output)
head(output_df)
```

------------------------------------------------------------------------

### Plotting the results

We will now plot the results by first converting the output to a long format and then using `ggplot2` to plot the data.

```{r sir-npi-plot}
# Load necessary packages
library(tidyr)
library(ggplot2)
# Convert the output to long format
output_df <- output_df |> pivot_longer(
  cols = -time,
  names_to = "compartment",
  values_to = "value"
)
# Plot the data using ggplot2
sir_npi_plot <- ggplot(
  data = output_df,
  aes(
    x = time,
    y = value,
    color = compartment
  )) +
  geom_line() +
  # Add a vertical line to indicate the times of NPI implementation
  geom_vline(
    xintercept = npi_times["t_NPI_start"],
    linetype = "dashed",
    color = "black"
  ) +
  geom_vline(
    xintercept = npi_times["t_NPI_end"],
    linetype = "dashed",
    color = "black"
  ) +
  # Add labels
  labs(
    title = "SIR Model with NPI",
    x = "Time (days)",
    y = "Number of individuals",
    color = "Compartment"
  ) +
  theme_minimal()
plot(sir_npi_plot)
```

1.  What do you observe when you change the value of `epsilon` to a value other than 0.5?
2.  What do you observe when you change the start and end times of the npi?
3.  What do you observe when you change the start and end times of the npi?
4.  Would you recommend longer NPIs with smaller values of `epsilon` or shorter NPIs with larger values of `epsilon`?
5.  How would you make this model more realistic?
