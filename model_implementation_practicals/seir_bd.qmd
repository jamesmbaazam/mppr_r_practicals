---
title: "Simulating an SEIR model with births and deaths"
author: "James Mba Azam"
format: 
  html:
    theme:
      light: flatly
      dark: darkly
execute:
  echo: true
  warning: false
  message: false
engine: knitr
editor_options:
  chunk_output_type: console
---

In this walk through, we will be simulating an SEIR model with births and deaths.

::: {.callout-tip collapse="true" icon="false"}
### How to work with this Quarto document

This document is created using **Quarto**, a powerful publishing system that combines text, code, and output. Here are some tips for working with it:

#### Rendering the document:

-   **In RStudio/Positron**: Click the "Render" button or use `Ctrl+Shift+K` (Windows/Linux) or `Cmd+Shift+K` (Mac)
-   **Command line**: Run `quarto render filename.qmd` in your terminal
-   **Alternative formats**: Change `format: html` to `format: pdf` in the YAML header to render as PDF

#### Running code interactively:

-   **Individual lines**: Place cursor on a line and press `Ctrl+Enter` (Windows/Linux) or `Cmd+Enter` (Mac)
-   **Code chunks**: Click the green "play" button in the top-right corner of any code chunk, or use `Ctrl+Shift+Enter` (Windows/Linux) or `Cmd+Shift+Enter` (Mac)
-   **All chunks**: Use "Run All" from the Run menu or `Ctrl+Alt+R` (Windows/Linux) or `Cmd+Option+R` (Mac)

#### Visual features:

-   **Light/Dark mode**: This document supports both light and dark themes that automatically adapt to your system preferences
-   **Interactive elements**: Code chunks can be executed independently, and outputs update dynamically
-   **Navigation**: Use the table of contents (if enabled) to jump between sections

#### Best practices:

-   Run code chunks sequentially from top to bottom on your first pass
-   Experiment with parameter values by modifying the code and re-running chunks
-   Save your work frequently using `Ctrl+S` (Windows/Linux) or `Cmd+S` (Mac)
:::

The SEIR model is a simple compartmental model used to describe the spread of infectious diseases in a population. The model divides the population into four compartments: susceptible (S), exposed (E), infectious (I), and recovered (R) individuals. The model equations describe the flow of individuals between these compartments based on the transmission rate ($\beta$), and the recovery rate ($\gamma$).

![An SEIR model with births and deaths](model_diagrams/seir_model.jpeg)

We will be using the `{deSolve}` package to solve the model equations. The `{deSolve}` package is a powerful and flexible package for solving differential equations in R. It provides a wide range of solvers for different types of differential equations.

Here, we will use the `lsoda()` function from the `{deSolve}` package to solve the model equations. The `lsoda()` function is a wrapper for the Livermore Solver for Ordinary Differential Equations (LSODA) developed by Hindmarsh and Petzold. It is a robust and efficient solver for [stiff and non-stiff differential equations](<https://en.wikipedia.org/wiki/Stiff_equation>).

The `lsoda()` function takes, among others, the following arguments:

- `func`: the model function that defines the differential equations,

- `times`: the time points at which to return results,

- `y`: the initial conditions, and

- `parms`: the parameters of the model.

## The model equations and R function definition

Let's start by defining the model equations.

Recall that the model equations for the SEIR model with births and deaths are given by:

$$
\begin{align}
\frac{dS}{dt} & = \color{green}{\mu N} - \beta S I - \color{blue}{\mu} S \\
\frac{dE}{dt} & = \beta S I - \sigma E - \color{blue}{\mu} E \\
\frac{dI}{dt} & = \sigma E - \gamma I - \color{blue}{\mu} I \\
\frac{dR}{dt} & = \gamma I - \color{blue}{\mu} R
\end{align}
$$

where:

-   $S$ is the number of susceptible individuals,
-   $E$ is the number of exposed individuals,
-   $I$ is the number of infectious individuals,
-   $R$ is the number of recovered individuals,
-   $\beta$ is the transmission rate,
-   $\sigma$ is the rate of progression from exposed to infectious,
-   $\gamma$ is the recovery rate,
-   $\mu$ is the birth and death rate,
-   $N$ is the total population.

The model function in R is defined as follows:

```{r seir-model}
# 1. Define the SEIR model
seir_model <- function(t, y, parms) {
  with(as.list(c(y, parms)), {
    dS <- mu * N - beta * S * I - mu * S
    dE <- beta * S * I - sigma * E - mu * E
    dI <- sigma * E - gamma * I - mu * I
    dR <- gamma * I - mu * R
    return(list(c(dS, dE, dI, dR)))
  })
}
```

Note the following about the function defined above:

-   We use the `with()` function to evaluate the expressions in the context of the list created by `as.list(c(state, parameters))`. This allows us to access the state variables and parameters directly without having to use the `$` operator. This makes the code easier to read and write (Run `?with` in the R console and read the documentation of the first three arguments).

-   The function returns a list of the derivatives of the state variables. This is the format expected by the `lsoda()` function (Run `?deSolve::lsoda` in the R console and read the documentation of the first three arguments).

## Model parameters

Next, we will define the parameter values and initial conditions.

The model has four parameters: $\beta$, $\sigma$, $\gamma$, and $\mu$.

We will define arbitrary values for these parameters for illustrative purposes.

Question: Can you interpret the values of the parameters?

```{r seir-params}
# 1. Define the SEIR model
seir_model <- function(t, y, parms) {
  with(as.list(c(y, parms)), {
    dS <- mu * N - beta * S * I - mu * S
    dE <- beta * S * I - sigma * E - mu * E
    dI <- sigma * E - gamma * I - mu * I
    dR <- gamma * I - mu * R
    return(list(c(dS, dE, dI, dR)))
  })
}
# Set parameter values
beta <- 520 / 365
sigma <- 1 / 60
gamma <- 1 / 30
mu <- 774835 / (65640000 * 365)
params <- c(beta, sigma, gamma, mu)
```

## Initial conditions

We will assume the outbreak starts with $0.1$ infectious individuals, $0.1$ exposed individuals, and $0$ recovered individuals. The population is completely susceptible at the start of the simulation, so the number of susceptible individuals is $N - E(0) - I(0) - R(0)$.

```{r seir-init}
N <- 1
E_0 <- 0.1
I_0 <- 0.1
R_0 <- 0
inits <- c(S = N - (E_0 + I_0 + R_0), E = E_0, I = I_0, R = R_0)
```

## Time steps to return results

`lsoda()` also expects a vector of time points at which to return results. We will run the model for 365 days and return results at each day.

```{r seir-time}
dt <- 1:365
```

## Solving the model

```{r seir-solve}
seir_results <- deSolve::lsoda(
  y = inits,
  times = dt,
  func = seir_model,
  parms = params
)
seir_results <- as.data.frame(seir_results)
```

### Plotting the results

Now, let's plot the results.

We will use the `ggplot2` package to plot the results. We will reshape the data to long format to make it easier to plot. For this, we will use the `pivot_longer()` function from the `tidyr` package.

```{r seir-model-plot}
# Load the necessary libraries
library(ggplot2)
library(tidyr)
# Create data for ggplot2 by reshaping
results_long <- seir_results |>
  pivot_longer(
    cols = -time,
    names_to = "compartment",
    values_to = "value"
  )

seir_plot <- ggplot(
  data = results_long,
  aes(
    x = time,
    y = value,
    color = compartment
  )
  ) +
  geom_line(linewidth = 1) +
  labs(
    title = "SEIR model",
    x = "Time",
    y = "Number of individuals"
  )
plot(seir_plot)
```

## Exercise

1.  Change beta to 0.0003 and plot the results. Can you interpret the plot?
2. What influence does the birth and death rate have on the dynamics of the model?
3. What happens if the birth and death rate is set to zero?
4. What happens if the birth and death rate is set to a very high value?
5. What happens if the birth and death rate is set to a value higher than the recovery rate?
